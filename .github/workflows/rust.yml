name: Rust

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:
    inputs: {}

env:
  CARGO_TERM_COLOR: always
  CARGO_VERSION: 1.57.0

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: cache cargo artifact
        uses: actions/cache@v2
        env:
          cache-name: cache-cargo-build
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
            assets/roms
            assets/bios
            assets/bios.zip
            assets/roms.zip
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install rust ${{ env.CARGO_VERSION }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.CARGO_VERSION }}
          override: true
          components: rustfmt, clippy

      - name: install linux requirements
        run: sudo sh -c "apt-get update && apt-get install -y cmake libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev unzip zip"

      - uses: actions/checkout@v2

      - name: install asset requirement
        run: make bios

      - name: check format
        run: cargo fmt --verbose -- --check

      - name: check lint
        run: cargo clippy --workspace --verbose -- -D warning

  test:
    runs-on: ubuntu-latest
    steps:
      - name: cache cargo artifact
        uses: actions/cache@v2
        env:
          cache-name: cache-cargo-build
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
            assets/roms
            assets/bios
            assets/bios.zip
            assets/roms.zip
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install rust ${{ env.CARGO_VERSION }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.CARGO_VERSION }}
          override: true

      - name: install linux requirements
        run: sudo sh -c "apt-get update && apt-get install -y cmake libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev unzip zip"

      - uses: actions/checkout@v2

      - name: install asset requirement
        run: make bios

      - name: Run tests
        run: cargo test --verbose --workspace

  build:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - name: cache cargo artifact
        uses: actions/cache@v2
        env:
          cache-name: cache-cargo-build
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
            assets/roms
            assets/bios
            assets/bios.zip
            assets/roms.zip
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install rust ${{ env.CARGO_VERSION }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.CARGO_VERSION }}
          override: true

      - name: install linux requirements
        run: sudo sh -c "apt-get update && apt-get install -y cmake libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev unzip zip"

      - uses: actions/checkout@v2

      - name: install asset requirement
        run: make bios

      - name: Build
        run: cargo build --verbose --workspace

